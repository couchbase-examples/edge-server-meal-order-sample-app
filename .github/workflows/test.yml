name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create .env file
        run: |
          echo "EDGE_SERVER_BASE_URL=http://localhost:60000" > .env

      - name: Set up test environment
        run: |
          # Create a Dockerfile for the test environment
          cat << EOF > Dockerfile.test
          FROM node:latest
          WORKDIR /app

          # Install SSL certificates handling tools 
            RUN apt-get update && apt-get install -y \
                libgtk2.0-0 \
                libgtk-3-0 \
                libgbm-dev \
                libnotify-dev \
                libgconf-2-4 \
                libnss3 \
                libxss1 \
                libasound2 \
                libxtst6 \
                xauth \
                xvfb \
                procps \
                x11vnc \
                x11-xkb-utils \
                xfonts-100dpi \
                xfonts-75dpi \
                xfonts-scalable \
                xvfb \
                ca-certificates \
                libnss3-tools \
                netcat-traditional \
                curl

          COPY . .
          COPY test/raw/couchbase-edge-server /usr/local/bin/
          COPY test/raw/config-tls-replication-sync.json /app/
          COPY test/raw/resetdemo.sh /app/

          # Set up certificates
          RUN mkdir -p ~/.pki/nssdb
          RUN certutil -d ~/.pki/nssdb -N --empty-password

          # Start services and run tests
          RUN chmod +x /usr/local/bin/couchbase-edge-server
          RUN chmod +x /app/resetdemo.sh
          RUN npm ci
          RUN npm install cypress --save-dev
          RUN npx cypress verify
          EOF

      - name: Build and run test container
        run: |
          docker build -t react-test-app -f Dockerfile.test .
          docker run -d --name test-container \
            -p 5173:5173 \
            -p 60000:60000 \
            react-test-app /bin/bash -c \
            "couchbase-edge-server --verbose --create-cert CN=localhost certfile.pem keyfile && \
              certutil -d ~/.pki/nssdb -A -n 'couchbase-edge' -t 'P,,' -i certfile.pem && \
              echo 'Starting Couchbase Edge server...' && \
              sh resetdemo.sh & \
              EDGE_PID=\$! && \
              echo 'Starting dev server...' && \
              npm run dev & \
              DEV_PID=\$! && \
              echo 'Waiting for services to be ready...' && \
              sleep 15 && \
              echo 'Checking if services are running...' && \
              if ! curl -s http://localhost:60000 > /dev/null; then \
                echo 'Couchbase Edge server is not responding' && \
                exit 1; \
              fi && \
              if ! curl -s http://localhost:5173 > /dev/null; then \
                echo 'Dev server is not responding' && \
                exit 1; \
              fi && \
              echo 'Services are ready' && \
              echo 'Running tests...' && \
              npm run test && \
              npx cypress run"

          # Check container logs
          docker logs -f test-container || true
          
          # Get container exit code
          EXIT_CODE=$(docker inspect test-container --format='{{.State.ExitCode}}')
          
          # Print container processes and network status for debugging
          echo "Container processes:"
          docker exec test-container ps aux || true
          echo "Network status:"
          docker exec test-container netstat -tulpn || true
          
          # Exit with the container's exit code
          exit $EXIT_CODE